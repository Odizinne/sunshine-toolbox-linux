#!/usr/bin/env python3

import os
import argparse
import subprocess
import time
import re

class SunshineToolbox:
    def __init__(self):
        self.status_file_path = os.path.expanduser("~/.local/share/sunshine_status/status.txt")

    def write_status(self, value):
        if value.lower() not in ['true', 'false']:
            print("Invalid value. Please specify true or false.")
            return
        
        # Ensure the directory exists
        os.makedirs(os.path.dirname(self.status_file_path), exist_ok=True)
        
        if value.lower() == 'true':
            # Create or empty the file
            open(self.status_file_path, 'w').close()
            print(f"Created an empty file at {self.status_file_path}")
        elif value.lower() == 'false':
            # Remove the file if it exists
            try:
                os.remove(self.status_file_path)
                print(f"Removed file at {self.status_file_path}")
            except FileNotFoundError:
                print(f"No file found at {self.status_file_path} to remove")

    def close_steam_big_picture(self):
        result = subprocess.run(['wmctrl', '-l'], stdout=subprocess.PIPE)
        windows = result.stdout.decode('utf-8')
        pattern = re.compile(r'\b(?=.*\bsteam\b)(?=.*\bmode\b)(?=.*\bbig\b)(?=.*\bpicture\b)', re.IGNORECASE)
        for line in windows.splitlines():
            parts = line.split(None, 3)
            if len(parts) == 4:
                window_id, desktop_id, pid, title = parts
                if pattern.search(title):
                    close_result = subprocess.run(['wmctrl', '-ic', window_id], stdout=subprocess.PIPE)
                    if close_result.returncode == 0:
                        print(f"Closed window: {title}")
                    else:
                        print(f"Failed to close window: {title}")
                    return True
        print("No matching window found.")
        return False

    def bp_dummy_process(self):
        keywords = {"steam", "mode", "big", "picture"}
        window_found_once = False
        
        while True:
            result = subprocess.run(['wmctrl', '-l'], stdout=subprocess.PIPE)
            windows = result.stdout.decode('utf-8').lower()
            
            found = any(all(keyword in line for keyword in keywords) for line in windows.splitlines())
            
            if window_found_once and not found:
                break
            
            window_found_once = window_found_once or found
            
            time.sleep(1)

def main():
    parser = argparse.ArgumentParser(description="Sunshine Toolbox")

    parser.add_argument('--set-status', choices=['true', 'false'], help="Set status to true or false")
    parser.add_argument('--close-bp', action='store_true', help="Close Big Picture")
    parser.add_argument('--bp-dummy', action='store_true', help="Dummy process for Big Picture")

    args = parser.parse_args()

    toolbox = SunshineToolbox()

    if args.set_status:
        toolbox.write_status(args.set_status)
    elif args.close_bp:
        toolbox.close_steam_big_picture()
    elif args.bp_dummy:
        toolbox.bp_dummy_process()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
